#include <Arduino.h>
#include <SPI.h>

#include "FDOS_LOG.h"
#include "VMExecutor.h"
#include "VMTime.h"

#include "PowerControl.h"

#include <U8g2lib.h>

#include <InputControls.h>
#include <RemoteControlInputs.h>

U8G2_LS027B7DH01_400X240_F_4W_HW_SPI u8g2(U8G2_R2, /* cs=*/DISP_CS_PIN, /* dc=*/U8X8_PIN_NONE, /* reset=*/U8X8_PIN_NONE);

Logger FDOS_LOG(&Serial);

VMExecutor executor;


class DisplayInputTestTask : RunnableTask {
  public:
    DisplayInputTestTask() {}

  private:
    void run(TIME_INT_t time) {
        CONTROLS.update();
        FDOS_LOG.println(POWER.getBatteryVoltage());
        digitalWrite(DISPLAY_LIGHT_PIN, CONTROLS.button5.isPressed());
        digitalWrite(BTN1_LED_PIN, CONTROLS.button1.isPressed());
        digitalWrite(BTN2_LED_PIN, CONTROLS.button2.isPressed());
        digitalWrite(BTN3_LED_PIN, CONTROLS.button3.isPressed());
        digitalWrite(BTN4_LED_PIN, CONTROLS.button4.isPressed());
        digitalWrite(BTN5_LED_PIN, CONTROLS.button5.isPressed());
        u8g2.setDrawColor(CONTROLS.wheel.hasChanged() ? 0 : 1);
        u8g2.drawBox(2, 80, 10, 10);

        u8g2.setDrawColor(CONTROLS.joy1H.hasChanged() ? 0 : 1);
        u8g2.drawBox(22, 80, 10, 10);
        u8g2.setDrawColor(CONTROLS.joy1V.hasChanged() ? 0 : 1);
        u8g2.drawBox(42, 80, 10, 10);
        u8g2.setDrawColor(CONTROLS.wheelBtn.hasChanged() ? 0 : 1);
        u8g2.drawBox(62, 80, 10, 10);
        u8g2.setDrawColor(CONTROLS.wheelBtn.wasPressed() ? 0 : 1);
        u8g2.drawBox(62, 90, 5, 5);
        u8g2.setDrawColor(CONTROLS.wheelBtn.wasReleased() ? 0 : 1);
        u8g2.drawBox(62, 95, 5, 5);

        u8g2.setDrawColor(1);
        u8g2.drawBox(2, 100, 240, 144);
        u8g2.setDrawColor(0);
        u8g2.setCursor(2, 100);
        u8g2.printf("H1: Raw %i uint %i int %i", CONTROLS.joy1H.getRawValue(), CONTROLS.joy1H.getUnsignedValue(), CONTROLS.joy1H.getSignedValue());
        u8g2.setCursor(2, 118);
        u8g2.printf("V1: Raw %i uint %i int %i", CONTROLS.joy1V.getRawValue(), CONTROLS.joy1V.getUnsignedValue(), CONTROLS.joy1V.getSignedValue());
        u8g2.setCursor(2, 136);
        u8g2.printf("H2: Raw %i uint %i int %i", CONTROLS.joy2H.getRawValue(), CONTROLS.joy2H.getUnsignedValue(), CONTROLS.joy2H.getSignedValue());
        u8g2.setCursor(2, 154);
        u8g2.printf("V2: Raw %i uint %i int %i", CONTROLS.joy2V.getRawValue(), CONTROLS.joy2V.getUnsignedValue(), CONTROLS.joy2V.getSignedValue());
        u8g2.setCursor(2, 172);
        u8g2.print(CONTROLS.wheel.getDelta());
        u8g2.setCursor(30, 172);
        u8g2.printf("Ar: Raw %i state: %i", CONTROLS.arrows.getRawValue(), CONTROLS.arrows.getState());
        u8g2.sendBuffer();
    }

} displayTask;

int wheelVal = 0;

void wheelFunc() {
    wheelVal = wheelVal + CONTROLS.wheel.getDelta();
    Serial.println(wheelVal);
}

void setup(void) {

    SPI.begin();


    CONTROLS.wheel.update();
    CONTROLS.wheel.subscribe(wheelFunc);

    Serial.begin(921600);

    Serial.println("Display Starting ...");
    u8g2.setBusClock(SPI_DISP_FREQ);
    u8g2.begin();
    u8g2.clearBuffer();
    u8g2.setDrawColor(1);
    u8g2.drawBox(0, 0, 400, 240);
    u8g2.setDrawColor(0); // in order to make content visable
    u8g2.setFont(u8g2_font_timB14_tr);
    // u8g2.setFontRefHeightExtendedText();
    u8g2.setFontPosTop();
    // u8g2.setFontDirection(0);

    u8g2.drawStr(0, 0, "Display Ready!");
    u8g2.sendBuffer();

    delay(2000);

    digitalWrite(LED_PIN, false);

    executor.schedule((RunnableTask *)&displayTask, executor.getTimingPair(25, FrequencyUnitEnum::milli));
    POWER.start(executor);
}

void loop(void) {
    uint32_t delayTime = executor.runSchedule();
    // You may want to allow the loop to finish and avoid long delays
    //    if you are using background arduino features
    if (delayTime > 100000)
        delayTime = 100000;
    if (delayTime > MIN_MICRO_REST) {
        delayMicroseconds(delayTime - MIN_MICRO_REST);
    }
}
